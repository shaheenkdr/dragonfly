
.. _RefFAQ:

Frequently Asked Questions (FAQ)
============================================================================

The following is a list of frequently asked questions related to the
Dragonfly speech recognition framework.

.. contents:: Table of Contents


General Questions
----------------------------------------------------------------------------

What is Dragonfly?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dragonfly is a speech recognition framework that makes it convenient to
create custom commands to use with speech recognition software.

Dragonfly was written to make it very easy for Python macros, scripts,
and applications to interface with speech recognition engines. Its
design allows speech commands and grammar objects to be treated as
first-class Python objects.


Which speech recognition software and operating systems are supported?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dragonfly supports the following speech recognition (SR) engines:

* :ref:`Dragon NaturallySpeaking <RefDNSInstall>` (DNS), a product of
  *Nuance*. All DNS versions up to 15 (the latest) should be supported.
* :ref:`Windows Speech Recognition <RefWSRInstall>` (WSR), included with
  Microsoft Windows Vista, Windows 7+, and freely available for Windows XP
* :ref:`Kaldi <RefKaldiEngine>`
* :ref:`CMU Pocket Sphinx <RefSphinxEngine>`

Dragonfly has cross platform support for Windows, macOS and Linux (using
X11). The following table shows which engines are available on which
platforms:

================================     =======================
Operating system                     Available SR engines
================================     =======================
Windows                              DNS, WSR, Kaldi, Sphinx
Linux                                Kaldi, Sphinx
macOS                                Kaldi (soon), Sphinx
================================     =======================

Windows-only speech recognition software, i.e. DNS and WSR, can be used to
control Linux or macOS machines via `Aenea`_, a client-server library for
using Dragonfly voice macros on remote hosts.

Dragonfly's X11 support should work just fine on non-Linux unices, such as
FreeBSD. If you are planning on using the Kaldi engine backend on a platform
like FreeBSD, you will need to compile the Kaldi engine dependencies
manually.


Where can I find examples Dragonfly command modules?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There is a list of repositories and other projects containing Dragonfly
command modules under the :ref:`RefRelatedResources` ->
:ref:`RefCommandModulesList` section of the documentation. There are also
example command modules in `dragonfly/examples`_.


What is the difference between dragonfly and dragonfly2?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Dragonfly* is the `original project`_ written by Christo Butcher (t4ngo).
It is no longer actively maintained. *Dragonfly2* is a `fork`_ of dragonfly
that uses a different *distribution* name in order to upload releases to the
`Python Package Index <https://pypi.org>`__, so that the package can be
installed by running::

  pip install dragonfly2

It is important to note that the import name is still "dragonfly":

.. code-block:: python

   from dragonfly import Grammar, MappingRule, Key, Text, Mouse, Dictation

Dragonfly2 is intended to be backwards-compatible continuation of the
original project. Many bugs and other issues are fixed in this version. It
supports using additional speech recognition engine backends (e.g. the
:ref:`Kaldi engine <RefKaldiEngine>`). It also works with Python 3 and has
cross-platform support for Windows, GNU/Linux and macOS. Dragonfly2 also has
many other new features not found in the old version.

See the :ref:`changelog <RefChangelog>` for the full list of changes between
the two versions.


How can I use older Dragonfly scripts with Dragonfly2?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Older dragonfly scripts are mostly written with Python 2.x in mind. If you
are using Python 3.x, then there are a few ways to convert older Python 2.x
code so it is usable:

* `2to3`_ - command-line program that reads Python 2.x source code and
  applies a series of fixers to transform it into valid Python 3.x code.
* `python-modernize`_ - a command-line program that uses *2to3* to make
  Python 2 code compatible with Python 3.

A number of older dragonfly command modules also include the following code:

.. code-block:: python

   try:
       import pkg_resources
       pkg_resources.require("dragonfly >= 0.6.5")
   except ImportError:
       pass

Since the distribution name has been changed to *dragonfly2*, you will need
to either replace :code:`dragonfly` with :code:`dragonfly2` or remove code
like this altogether.


API and Troubleshooting Questions
----------------------------------------------------------------------------

Why are my command modules are not being loaded/detected?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you have placed Python files into the *MacroSystem* / user directory
(using DNS/Natlink) or the directory where your module loader script is
(using another engine) and there is no indication that the files were
loaded, then there can be a few reasons why:

#. Your Python files don't start with an underscore `_` and end with
   `.py`.

#. You've put the files in the wrong directory.
   If you're using Natlink, then try running the Natlink configuration-
   program to double check where Natlink loads files from.

In the case that your command modules are being loaded and you're getting
error messages not mentioned in the FAQ, then see the
:ref:`RefFAQUnansweredQuestions` section.


How do I fix "No handlers could be found for logger X" error messages?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This error is specific to Python 2.x. It isn't a Dragonfly error, but as
many users still use Python 2.7, it is listed here. This is the most common
example of the error: ::

  No handlers could be found for logger "action"

There are two easy methods for to solving this problem:

.. code-block:: python

   # --- Method one ---
   # Set up a basic logging handler for console output using the 'logging'
   # module.
   import logging
   logging.basicConfig()

   # --- Method two ---
   # Set up Dragonfly's logging handler from the 'dragonfly.log' module.
   # This sets up a logging handler for console output, appends log messages
   # to a log file (~/.dragonfly.log) and sets sane defaults for Dragonfly's
   # internal loggers.
   from dragonfly.log import setup_log
   setup_log()

For either method, add the two lines of code near the top of one of your
command modules or command module loader script, if you use one.


Cannot load compatibility module support error when starting Dragon
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is a known issue with Natlink. Please see this
`Natlink troubleshooting page`_ for solutions on how to solve this and other
issues that occur before the Natlink messages window appears.


How do I use an "extra" in a Dragonfly spec multiple times?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO


Is there a way to re-use a function with different "extra" names?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO


Why aren't Dragonfly's input actions working on my Linux system?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dragonfly's :code:`Key`, :code:`Text` and :code:`Mouse` action classes use
`xdotool`_ on Linux. These actions will not work if it isn't installed. It
can normally be installed through your system's package manager. On
Debian-based or Ubuntu-based systems, this is done by running the following
console command::

  sudo apt install xdotool

The keyboard/mouse input classes will only work in an X11 session. You will
get the following error if you are using `Wayland`_ or something else::

  NotImplementedError: Keyboard support is not implemented for this platform!

If you see this message, then you will either need to `switch to X11`_ or
use something like `ydotool`_ to have keyboard/mouse input work properly.


.. _RefFAQUnansweredQuestions:

Unanswered Questions
----------------------------------------------------------------------------

If your question isn't listed above, then there are a few ways to get in
touch:

* Open a `new issue`_ on GitHub.
* Join one of Dragonfly's chat channels:

  * `Gitter channel`_
  * `Matrix channel`_

* Ask your question on the `Dragonfly mailing list`_.
* Send an email to Dane Finlay, the project maintainer, at
  `Danesprite@posteo.net`_.


.. _2to3: https://docs.python.org/2/library/2to3.html
.. _Aenea: https://github.com/dictation-toolbox/aenea
.. _Danesprite@posteo.net: mailto:Danesprite@posteo.net
.. _Dragonfly mailing list: https://groups.google.com/forum/#!forum/dragonflyspeech
.. _Gitter Channel: https://gitter.im/dictation-toolbox/dragonfly
.. _Matrix channel: https://riot.im/app/#/room/#dragonfly2:matrix.org
.. _Natlink Troubleshooting page: https://qh.antenna.nl/unimacro/installation/problemswithinstallation.html
.. _Wayland: https://wayland.freedesktop.org/
.. _dragonfly/examples: https://github.com/dictation-toolbox/dragonfly/tree/master/dragonfly/examples
.. _fork: https://en.wikipedia.org/wiki/Fork_(software_development)
.. _new issue: https://github.com/dictation-toolbox/dragonfly/issues/new
.. _original project: https://github.com/t4ngo/dragonfly
.. _python-modernize: https://pypi.org/project/modernize/
.. _switch to X11: https://askubuntu.com/questions/961304/how-do-you-switch-from-wayland-back-to-xorg-in-ubuntu-17-10
.. _xdotool: https://www.semicomplete.com/projects/xdotool
.. _ydotool: https://github.com/ReimuNotMoe/ydotool
